generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Represents an event. Event organizers can manage events. Visitors can register for events.
model Event {
  emailRegistrations EmailRegistration[]

  id String @id @default(uuid())

  /// Title of the event.
  title    String
  /// Date and time of the event.
  dateTime DateTime
  /// Location of the event.
  location String

  /// Time when the record was created.
  createdAt                DateTime  @default(now())
  /// Time when the event is published. If null, the event is considered a draft.
  isPublishedAt            DateTime? @default(now())
  /// Time when the event is opened for registrations.
  opensForRegistrationsAt  DateTime  @default(now())
  /// Time when the event is closed for registrations. If null, the closes when the event starts.
  closesForRegistrationsAt DateTime?
}

/// Represents a person that has registered to an event by email.
/// There can only exist one registration per email and event.
model EmailRegistration {
  event        Event         @relation(fields: [eventId], references: [id])
  personalInfo PersonalInfo? @relation(fields: [personalInfoId], references: [id])
  contactInfo  ContactInfo   @relation(fields: [email], references: [email])

  eventId        String
  personalInfoId String?

  email     String
  createdAt DateTime @default(now())

  @@id([email, eventId])
}

/// Represents the contact information of a person, that is registered to one or more events.
model ContactInfo {
  emailRegistrations EmailRegistration[]

  id    String @id @default(uuid())
  email String @unique

  firstName String
  lastName  String

  firstNickName String?
  lastNickName  String?
}

/// Represents personal information about a registration, such as food preferences.
model PersonalInfo {
  emailRegistrations EmailRegistration[]

  id String @id @default(uuid())

  allergies String[]
  diet      String
}
