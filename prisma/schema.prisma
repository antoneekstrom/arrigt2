generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Represents an event. Event organizers can manage events. Visitors can register for events.
model Event {
  Registrations Registration[] @relation
  DataAgreement DataAgreement  @relation(fields: [dataAgreementId], references: [id])

  id              String @id @default(uuid())
  dataAgreementId String

  /// Title of the event.
  title     String
  /// Date and time of the event.
  dateTime  DateTime
  /// Location of the event.
  location  String?
  /// Organizer of the event.
  organizer String?
  /// Organizer of the post.
  author    String?

  /// Time when the record was created.
  createdAt   DateTime  @default(now())
  /// Time when the record was last updated.
  updatedAt   DateTime  @default(now())
  /// Time when the event is published. If null, the event is considered a draft.
  publishedAt DateTime? @default(now())
}

/// Represents a GDPR data agreement.
model DataAgreement {
  Event Event[]

  id String @id @default(uuid())

  deleteAt     DateTime
  dataStored   String[]
  parties      String[]
  contactEmail String
}

/// Represents a person that has registered to an event by email.
/// There can only exist one registration per email and event.
model Registration {
  Event       Event        @relation(fields: [eventId], references: [id])
  Attendee    Attendee     @relation(fields: [email], references: [email])
  Preferences Preferences? @relation(fields: [preferencesId], references: [id], onDelete: Cascade)

  eventId       String
  email         String
  preferencesId String?

  /// Time when the record was created.
  createdAt DateTime @default(now())
  /// Time when the record was last updated.
  updatedAt DateTime @default(now())

  @@id([email, eventId])
}

/// Contact information of a person that is registered to one or more events.
model Attendee {
  Registration Registration[]

  email String @id

  firstName     String
  lastName      String
  firstNickName String?
  lastNickName  String?
}

model Preferences {
  Registration Registration[]

  id        String   @id
  diet      String
  allergies String[]
  extra     String
}
